pip install seaborn

import numpy as np
import seaborn as sns
import pandas as pd 
import matplotlib.pyplot as plt
from scipy import stats
%matplotlib inline

train = pd.read_csv('./train.csv')      //Upload .csv files in binder

train.head()

train.shape

train.info()

test = pd.read_csv('./test.csv')


---------------------------------------------
plt.subplots(figsize=(12,9))
sns.distplot(train['SalePrice'], fit=stats.norm)
(mu, sigma) = stats.norm.fit(train['SalePrice'])
plt.legend(['Normal dist. ($/mu=$ {:.2f} and $/sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')
plt.ylabel('Frequency')
fig= plt.figure()
stats.probplot(train['SalePrice'], plot=plt)
plt.show()
--------------------------------------------

train['SalePrice'] = np.log1p(train['SalePrice'])
plt.subplots(figsize = (12,9))
sns.distplot(train['SalePrice'], fit=stats.norm)
(mu,sigma) = stats.norm.fit(train['SalePrice'])
plt.legend(['Normal dist. ($\mu=$ {:.2f} and $\sigma=$ {:.2f})'.format(mu,sigma)], loc='best')
fig=plt.figure()
stats.probplot(train['SalePrice'], plot=plt)
plt.show()


train.columns[train.isnull().any()]

plt.figure(figsize= (12,6))
sns.heatmap(train.isnull())
plt.show()

Isnull = train.isnull().sum()/len(train)*100
Isnull = Isnull[Isnull>0]
Isnull.sort_values(inplace=True, ascending= False)
Isnull


Isnull = Isnull.to_frame()

Isnull.columns = ['count']

Isnull.index.names = ['Name']

Isnull['Name']= Isnull.index

plt.figure(figsize=(13,5))
sns.set(style='whitegrid')
sns.barplot(x='Name', y='count' , data=Isnull)
plt.xticks(rotation=90)
plt.show()

train_corr = train.select_dtypes(include= [np.number])

train_corr.shape

del train_corr['Id']

corr= train_corr.corr()
plt.subplots(figsize= (20,9))
sns.heatmap(corr, annot=True)

top_feature = corr.index[abs(corr['SalePrice']>0.5)]
plt.subplots(figsize= (12,8))
top_corr = train[top_feature].corr()
sns.heatmap(top_corr, annot=True)
plt.show()

train.OverallQual.unique()

sns.barplot(train.OverallQual, train.SalePrice)

plt.figure(figsize=(18,8))
sns.boxplot(x=train.OverallQual, y=train.SalePrice)

col = ['SalePrice' , 'OverallQual' , 'GrLivArea' , 'GarageCars' , 'TotalBsmtSF' , 'FullBath' , 'TotRmsAbvGrd' , 'YearBuilt']
sns.set(style='ticks')
sns.pairplot(train[col], size=3, kind='reg')

print("Find the most important features realtive to the target")
cor = train.corr()
corr.sort_values(['SalePrice'], ascending=False, inplace= True)
corr.SalePrice


//Inputing missing values
# PoolQC has missing value ratio is 99%+. So, there is fill by None
train['PoolQC'] = train['PoolQC'].fillna('None')

#Arround 50% missing values attributes have been fill by None
train['MiscFeature'] = train['MiscFeature'].fillna('None')
train['Alley'] = train['Alley'].fillna('None')
train['Fence'] = train['Fence'].fillna('None')
train['FireplaceQu'] = train['FireplaceQu'].fillna('None')

#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood
train['LotFrontage'] = train.groupby("Neighborhood")["LotFrontage"].transform(
    lambda x: x.fillna(x.median()))


#GarageType, GarageFinish, GarageQual and GarageCond these are replacing with None
for col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:
    train[col] = train[col].fillna('None')


#GarageYrBlt, GarageArea and GarageCars these are replacing with zero
for col in ['GarageYrBlt', 'GarageArea', 'GarageCars']:
    train[col] = train[col].fillna(int(0))

#BsmtFinType2, BsmtExposure, BsmtFinType1, BsmtCond, BsmtQual these are replacing with None
for col in ('BsmtFinType2', 'BsmtExposure', 'BsmtFinType1', 'BsmtCond', 'BsmtQual'):
    train[col] = train[col].fillna('None')

#MasVnrArea : replace with zero
train['MasVnrArea'] = train['MasVnrArea'].fillna(int(0))

#MasVnrType : replace with None
train['MasVnrType'] = train['MasVnrType'].fillna('None')

#There is put mode value 
train['Electrical'] = train['Electrical'].fillna(train['Electrical']).mode()[0]

#There is no need of Utilities
train = train.drop(['Utilities'], axis=1)


#Checking there is any null value or not
plt.figure(figsize=(10, 5))
sns.heatmap(train.isnull())



//Now, there is no any missing values

//Encoding str to int


cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', 
        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', 
        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',
        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', 
        'YrSold', 'MoSold', 'MSZoning', 'LandContour', 'LotConfig', 'Neighborhood',
        'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',
        'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'Foundation', 'GarageType', 'MiscFeature', 
        'SaleType', 'SaleCondition', 'Electrical', 'Heating')


from sklearn.preprocessing import LabelEncoder
for c in cols:
    lbl = LabelEncoder() 
    lbl.fit(list(train[c].values)) 
    train[c] = lbl.transform(list(train[c].values))


//Preparing data for prediciton

#Take targate variable into y
y = train['SalePrice']

#Delete the saleprice
del train['SalePrice']

#Take their values in X and y
X = train.values
y = y.values

# Split data into train and test formate
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)

//Linear Regression


#Train the model
from sklearn import linear_model
model = linear_model.LinearRegression()

#Fit the model
model.fit(X_train, y_train)

#Prediction
print("Predict value " + str(model.predict([X_test[142]])))
print("Real value " + str(y_test[142]))


#Score/Accuracy
print("Accuracy --> ", model.score(X_test, y_test)*100)



//RandomForestRegression
#Train the model
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(n_estimators=1000)

#Fit
model.fit(X_train, y_train)

#Score/Accuracy
print("Accuracy --> ", model.score(X_test, y_test)*100)


//GradientBoostingRegressor

#Train the model
from sklearn.ensemble import GradientBoostingRegressor
GBR = GradientBoostingRegressor(n_estimators=100, max_depth=4)


#Fit
GBR.fit(X_train, y_train)


print("Accuracy --> ", GBR.score(X_test, y_test)*100)
